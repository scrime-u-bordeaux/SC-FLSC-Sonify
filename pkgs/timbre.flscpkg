;;;; synthetiseur Sonify -- fonctions de timbre harmonique

;;; prototype general: fonction timbre
;;; fonction indice{nombre positif} -> gain{[0,1]}

;;; paquetage de fonctions mathematiques
;;; (prox delta x): proximite de x a une valeur entiere (pente delta)
(require "math.flscpkg")
;;; paquetage de fonctions parametre
(require "parms.flscpkg")

;;; bharm: bruitage harmonique (d'amplitude)
;;; indice de bruitage -> fonction timbre
(define (bharm (let ((mbharm (module (alpha) (- 1 (* alpha (crand 1 -1))))))
                 (lambda (dates alpha) (lambda (x) (mbharm (gain dates alpha))))))
;;; comb: filtre en peigne
;;; proximite -> fonction timbre
        (comb (let ((mcomb (module (delta x) (prox delta x))))
                (lambda (dates delta) (lambda (x) (mcomb (parmlin dates 10 delta) x)))))
;;; degr: degressivite
;;; ordre de degressivite -> fonction timbre
        (degr (let ((mdegr (module (slp x) (** x (neg slp)))))
                (lambda (dates slp) (lambda (x) (mdegr (gain dates slp) x)))))
;;; dom: dominance
;;; gain, limite -> fonction timbre
        (dom (let ((mdom (module (alpha x0 x) (** alpha (clip (- x0 x) -1 1)))))
               (lambda (dates alpha x0) (lambda (x) (mdom (parmexp dates 2.82842712 1.5 alpha) (parmlin dates 8 x0) x)))))
;;; presence cyclique de raison 2,3,4
;;; gain, ... -> fonction timbre
        (pcyc2 (let ((mpcyc (module (a2 x) (+ (prox 2 (/ (- x 1) 2)) (* a2 (prox 2 (/ (- x 2) 2)))))))
                 (lambda (dates a2) (lambda (x) (mpcyc (gain dates a2) x)))))
        (pcyc3 (let ((mpcyc (module (a2 a3 x) (+ (prox 3 (/ (- x 1) 3))
                                                 (* a2 (prox 3 (/ (- x 2) 3)))
                                                 (* a3 (prox 3 (/ (- x 3) 3)))))))
                 (lambda (dates a2 a3) (lambda (x) (mpcyc (gain dates a2) (gain dates a3) x)))))
        (pcyc4 (let ((mpcyc (module (a2 a3 a4 x) (+ (prox 4 (/ (- x 1) 4))
                                                    (* a2 (prox 4 (/ (- x 2) 4)))
                                                    (* a3 (prox 4 (/ (- x 3) 4)))
                                                    (* a4 (prox 4 (/ (- x 4) 4)))))))
                 (lambda (dates a2 a3 a4) (lambda (x) (mpcyc (gain dates a2) (gain dates a3) (gain dates a4) x)))))
;;; presence logarithmique d'ordre 1,2
;;; proximite, gain, ... -> fonction timbre
        (plog1 (let ((mplog (module (delta x) (prox delta (log2 x)))))
                 (lambda (dates delta) (lambda (x) (mplog (parmlin dates 10 delta) x)))))
        (plog3 (let ((mplog (module (delta a3 x) (max (prox delta (log2 x)) (* a3 (prox delta (log2 (/ x 3))))))))
                 (lambda (dates delta a3) (lambda (x) (mplog (parmlin dates 10 delta) (gain dates a3) x)))))

;;; fonction de couleur
;;; gain, freq_basse, freq_haute -> fonction (frequence -> gain)
        (col (let ((mcol (module (alpha fc df f) (** alpha (clip (/ (log2 (/ f fc)) (log2 df)) -1 1)))))
               (lambda (dates alpha fc df) (lambda (f) (mcol (parmexp dates 1 1 alpha)
                                                         (parmexp dates 880 2 fc)
                                                         (parmexp dates 1 2 df) f))))))
